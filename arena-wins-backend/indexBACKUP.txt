import express from 'express';
import cors from 'cors';
import fetch from 'node-fetch';
import dotenv from 'dotenv';

dotenv.config();

const app = express();
const PORT = process.env.PORT || 4000;
const RIOT_API_KEY = process.env.RIOT_API_KEY;
const PUUID = process.env.PUUID;
const QUEUE_ID_ARENA = 1700;

// Allowed origins for CORS
const allowedOrigins = [
  'https://booplenoodle.github.io',
  'http://localhost:5173', // Vite dev
  'http://localhost:3000'  // CRA dev
];

// CORS config
const corsOptions = {
  origin: function (origin, callback) {
    if (!origin || allowedOrigins.includes(origin)) {
      callback(null, true);
    } else {
      console.log(`Blocked CORS origin: ${origin}`);
      callback(new Error('Not allowed by CORS'));
    }
  },
  optionsSuccessStatus: 200
};

app.use(cors(corsOptions));
app.use(express.json());

// Prevent favicon error in browser
app.get('/favicon.ico', (req, res) => res.sendStatus(204));

// Riot API helpers
const fetchMatchIds = async () => {
  const url = `https://americas.api.riotgames.com/lol/match/v5/matches/by-puuid/${PUUID}/ids?count=20&api_key=${RIOT_API_KEY}`;
  const response = await fetch(url);
  if (!response.ok) throw new Error(`Failed to fetch match IDs: ${response.statusText}`);
  return response.json();
};

const fetchMatchDetails = async (matchId) => {
  const url = `https://americas.api.riotgames.com/lol/match/v5/matches/${matchId}?api_key=${RIOT_API_KEY}`;
  const response = await fetch(url);
  if (!response.ok) throw new Error(`Failed to fetch match details: ${response.statusText}`);
  return response.json();
};

// Endpoint
app.get('/api/win-percentage', async (req, res) => {
  try {
    if (!RIOT_API_KEY || !PUUID) {
      return res.status(500).json({ error: 'Missing Riot API Key or PUUID in environment variables.' });
    }

    const matchIds = await fetchMatchIds();
    const arenaMatches = [];

    for (const matchId of matchIds) {
      if (arenaMatches.length >= 5) break;
      const match = await fetchMatchDetails(matchId);
      if (match.info?.queueId === QUEUE_ID_ARENA) {
        arenaMatches.push(match);
      }
    }

    const wins = arenaMatches.filter(match => {
      const player = match.info.participants.find(p => p.puuid === PUUID);
      return player?.placement === 1;
    }).length;

    const totalMatches = arenaMatches.length;
    const winPercent = totalMatches > 0 ? ((wins / totalMatches) * 100).toFixed(2) : '0.00';

    res.json({
      message: `Analyzed ${totalMatches} Arena matches.`,
      wins,
      totalMatches,
      winPercent
    });
  } catch (error) {
    console.error('Error in /api/win-percentage:', error);
    res.status(500).json({ error: error.message || 'Failed to fetch match data' });
  }
});

// Root
app.get('/', (req, res) => {
  res.send('Arena Wins Backend is running!');
});

app.listen(PORT, () => {
  console.log(`âœ… Server running on port ${PORT}`);
});
